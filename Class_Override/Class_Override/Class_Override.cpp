#include "Framework.h"

// 클래스에서 다른 함수들을 취급하는 방법

// 전역변수
int a = 0;

int main()
{
    Data* data = new Data();
    data->Add(1, 2); // 반환값을 안받아도 과정을 보려고 호출만 가능

    // 함수 안에서 똑같은 변수를 만들 수 있다
    int a = 1;
    cout << a << endl;

    if (true)
    {
        // 조건문 안에서 또 똑같은 변수를 만들 수 있다
        int a = 2;
        cout << a << endl;

        // 이런 식으로 코드가 한 계층의 안으로 들어오면 똑같은 이름의 변수를 새로 만들어서 쓸 수 있다
        // 단, 계층 안에서 만든 코드는 계층 안에서 연산이 끝나면 메모리 할당이 끝나게 된다
    }
    //main 함수 안에 아무 조건 없이 {}를 만들고 이 안에서 변수를 똑같이 만들면?
    {
        //만들 수 있다!
        int a = 3;
        std::cout << a << std::endl;
        //그리고 이 {} 가 끝나면 여기서 만든 a는 없어진다! (main의 a로 돌아간다)
    }

    std::cout << a << std::endl;

    // 결론 : C++에서는 {}를 계층의 기준으로 본다. 이 안으로 들어오면 한 단계 "안으로" 들어온 것
    //       그리고 이 안에서는 밖에서 만든 변수와 똑같은 이름의, 별도의 변수도 만들 수 있다

    //       이것이 지역변수와 전역변수의 차이이자 응용법

    // 중요한 점 : {}가 중요한 게 아니라,
    //           "계층의 안에서 똑같은 이름을 써서 별개의 데이터를 또 만들 수 있다"
    //           그리고....클래스에 계층의 개념을 적용했을 때,
    //           자식 클래스는 부모 클래스의 하위 / 혹은 "안"이라고 해석할 수도 있다.

    // 추측 가능한 결론 2 : 자식 클래스에, 부모 클래스와 같은 이름의, 또 다른 코드도
    //                     만들 수 있다.

    // 계산기의 인스턴스 작성
    Calculator* calc = new Calculator();

    //이 계산기는 진짜 계산을 위해 만들었으므로
    //사칙연산 함수를 수행하면 출력 대신 산수 연산을 한다 <- 확인

    calc->Add(7, 3); // 호출했을 때 뭔가 출력되는지 확인

    //실제 계산도 수행
    std::cout << calc->Add(7, 3) << std::endl;
    std::cout << calc->Sub(7, 3) << std::endl;
    std::cout << calc->Mult(7, 3) << std::endl;
    std::cout << calc->Div(7, 3) << std::endl;
    std::cout << calc->Nam(7, 3) << std::endl;

    // 이렇게, 자식 클래스에서 부모 클래스에 있던 함수와 똑같은 명칭을 써서
    // (함수명도 같고, 매개변수도, 매개변수 개수와 철자까지 같은 함수)
    // 정작 내용은 전혀 다른 함수를 만들 수 있음을 확인 가능

    // 이렇게 전혀 다른 함수를 만들어 호출하면 오류가 나지 않을 뿐더러...

    // ...부모 클래스에서 만든 함수를 무시한다는 것도 확인 (부모 쪽 함수를 수행하지 않음)

    // -> 이런 함수 작성 기법을 함수 덮어씌우기(override, 오버라이드)라고 한다.

    // 부모 클래스에서 공용으로 만들어야 할 함수가 있는데 (일반적인 함수)
    // 특정 자식 클래스에서 해당 함수를 고쳐야 할 필요가 있을 때
    // 이런 오버라이드 코딩이 종종 쓰인다.

    // 예 : MMORPG가 있는데 보통 플레이어는 "탈 것 타기"를 했을 때 인벤토리에서 탈것을 탈 때
    //      특정 직업만 마법의 차원에서 죽음의 군마 등을 소환해서 타는 경우, 함수 오버라이드 발생
}